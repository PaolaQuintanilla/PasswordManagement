@page "/"
@using PasswordManagement.Componenta2
@using PasswordManagement.Components
@using PasswordManagement.Data
@using PasswordManagement.DataModel
@using PasswordManagement.Services
@inject IPasswordService pwsService;
@using Syncfusion.Blazor.Buttons

<PageTitle>Password Management</PageTitle>

<h1>Password Management</h1>

Welcome to your place to manage your password

<div class="container d-flex flex-wrap align-items-center">
    @{
        foreach (PasswordModel infoP in informationPasswords)
    {
                        <Card Information="@infoP" Edit="@OpenEditDialog" Delete="@DeleteElement" />
    }}
</div>

<SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" class="fixed-button" IsPrimary="true" @onclick="() => OpenCreateDialog()"></SfButton>

@if(OpenDialog) 
{
    <PasswordManagement.Componenta2.ModelDialog OnClose="@CloseDialog" CreateElement="@CreateElement" EditElement="@UpdateElement" Element="@Element" Edit="@Edit" />
} 


@code {

    public bool OpenDialog { get; set; }
    private PasswordModel Element { get; set; }
    private bool Edit { get; set; }
    public List<PasswordModel> informationPasswords = new List<PasswordModel>();
    private int IdCount;
    //Initialize Section
    protected override async Task OnInitializedAsync()
    {
        await GetPasswords();
    }

    //Crud Operations
    #region CRUD
    private async Task GetPasswords()
    {
        informationPasswords = await pwsService.GetPasswords();
        IdCount = informationPasswords.Count + 1;
    }

    private async void CreateElement(PasswordModel information)
    {
        information.Id = IdCount++;
        await pwsService.CreatePassword(information);
        informationPasswords.Add(information);
        Element = new PasswordModel();
        OpenDialog = false;
        StateHasChanged();
    }

    private async void UpdateElement(PasswordModel information)
    {
        await pwsService.UpdatePassword(information);
        foreach (var item in informationPasswords)
        {
            if (item.Id == information.Id)
            {
                item.Id = information.Id;
                item.UserName = information.UserName;
                item.Name = information.Name;
                item.URL = information.URL;
            }
        }
        Element = new PasswordModel();
        OpenDialog = false;
        StateHasChanged();
    }

    private async void DeleteElement(PasswordModel information)
    {
        await pwsService.DeletePassword(information.Id);
        informationPasswords.Remove(information);
        StateHasChanged();
    }
    #endregion

    //Dialog Popup Section
    #region Dialog
    private void OpenCreateDialog()
    {
        Edit = false;
        Element = new PasswordModel();
        OpenDialog = true;
    }

    private void OpenEditDialog(PasswordModel information)
    {
        Element = information;
        Edit = true;
        OpenDialog = true;
    }

    private void CloseDialog(PasswordModel information = null)
    {
        OpenDialog = false;
        StateHasChanged();
    }
    #endregion
}

<style>
    .e-plus-icon::before {
        content: '\e823';
    }
    .fixed-button {
        position: fixed;
        right: 25px;
        bottom: 25px;
    }
</style>